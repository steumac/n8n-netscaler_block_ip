volumes:
  n8n_storage:
  postgres_storage:
  netscaler_postgres_storage:  # New volume for Netscaler DB
  qdrant_storage:

networks:
  demo:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['demo']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - N8N_PROTOCOL=http
    - N8N_HOST=n8n.metime.it
    - N8N_EDITOR_BASE_URL=https://n8n.metime.it/
    - WEBHOOK_URL=https://n8n.metime.it/
    - OLLAMA_HOST=10.0.0.73:11434
    - NODE_FUNCTION_ALLOW_BUILTIN=*
    - NODE_FUNCTION_ALLOW_EXTERNAL=*

services:
  postgres:
    image: postgres:16-alpine
    hostname: postgres
    networks: ['demo']
    container_name: n8n-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  # New dedicated PostgreSQL instance for Netscaler IP blocking system
  netscaler-postgres:
    image: postgres:16-alpine
    hostname: netscaler-postgres
    container_name: netscaler-postgres
    networks: ['demo']
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${NETSCALER_POSTGRES_USER:-netscaler}
      - POSTGRES_PASSWORD=${NETSCALER_POSTGRES_PASSWORD:-netscalerpassword}
      - POSTGRES_DB=${NETSCALER_POSTGRES_DB:-netscaler_db}
    ports:
      - "5433:5432"  # Map to different port to avoid conflict with n8n postgres
    volumes:
      - netscaler_postgres_storage:/var/lib/postgresql/data
      - ./database-schema.sql:/docker-entrypoint-initdb.d/database-schema.sql  # Mount your init script
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${NETSCALER_POSTGRES_USER:-netscaler} -d ${NETSCALER_POSTGRES_DB:-netscaler_db}']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    hostname: n8n-import
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    hostname: n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully
      netscaler-postgres:  # Add dependency on the new database
        condition: service_healthy

  qdrant:
    image: qdrant/qdrant
    hostname: qdrant
    container_name: qdrant
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage
